(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
    typeof define === 'function' && define.amd ? define(factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.JsBridge = factory());
})(this, (function () { 'use strict';

    // 获取当前浏览器的基础信息: 内核、版本、操作系统
    var ua = navigator.userAgent.toLowerCase();
    // 是否是iphone客户端
    var isIPhone = ~ua.indexOf("iphone");
    // 是否是Android客户端
    var isAndroid = ~ua.indexOf("android");
    // 当前Hybird应用中App端注入的JSContext上下文的名称
    var appJSContextName = "AjJSBridge";
    // 所有回调事件的列表
    var callbackBuckets = {};
    var globalThis = window;
    function isFn(obj) {
        return Object.prototype.toString.call(obj) === "[object Function]";
    }
    // 空回调函数
    function emptyCallback(res) {
        console.log("111111-emptyCallback", res);
    }
    // 创建回调函数key值
    function createCallbackID(action) {
        return "cb_" + action + "_" + new Date().getTime();
    }
    /**
     * h5调用native
     * @param action 操作名称
     * @param params 参数
     * @param callback 回调函数
     */
    var bridgeCommon = function (action, params, callback) {
        var _a, _b, _c, _d;
        if (params === void 0) { params = {}; }
        var callbackid = createCallbackID(action);
        // 如果有回调函数则设置回调函数,没有不设置
        callbackBuckets[callbackid] = isFn(callback) ? callback : emptyCallback;
        var data = params ? (typeof params === "string" ? params : JSON.stringify(params)) : "";
        // 参数
        var msgData = { action: action, data: data, callbackid: callbackid };
        console.log("111111-bridge参数", JSON.stringify(msgData));
        if (isIPhone) {
            (_c = (_b = (_a = window === null || window === void 0 ? void 0 : window.webkit) === null || _a === void 0 ? void 0 : _a.messageHandlers) === null || _b === void 0 ? void 0 : _b[appJSContextName]) === null || _c === void 0 ? void 0 : _c.postMessage(msgData);
        }
        else if (isAndroid) {
            (_d = window === null || window === void 0 ? void 0 : window[appJSContextName]) === null || _d === void 0 ? void 0 : _d.postMessage(JSON.stringify(msgData));
        }
        else {
            console.log("postMessage\u4E0D\u5B58\u5728,\u8BF7\u5728\u6307\u5B9Aapp\u5185\u8C03\u7528".concat(action, "\u65B9\u6CD5"));
        }
    };
    /**
     * Native通知web,主要是为了用来处理回调函数
     * @param callbackid 回调函数ID
     * @param jsonStr 参数结果
     * @returns
     */
    function notify(callbackid, jsonStr) {
        try {
            if (!callbackid)
                return;
            var fn = callbackBuckets[callbackid];
            var res = jsonStr ? (typeof jsonStr === "string" ? JSON.parse(jsonStr) : jsonStr) : {};
            fn && fn(res);
            setTimeout(function () {
                delete callbackBuckets[callbackid];
            }, 100);
        }
        catch (ex) {
            throw new Error(ex);
        }
    }
    globalThis.ajNotify = notify;

    var JsBridge = {
        getToken: function (params, callback) {
            var name = "getToken";
            bridgeCommon(name, params, function (res) {
                callback(res);
            });
        },
        getUserInfo: function (params, callback) {
            var name = "getUserInfo";
            bridgeCommon(name, params, function (res) {
                callback(res);
            });
        },
        getPickImg: function (params, callback) {
            var name = "pickImg";
            bridgeCommon(name, params, function (res) {
                callback(res);
            });
        },
        getPickFile: function (params, callback) {
            var name = "pickFile";
            bridgeCommon(name, params, function (res) {
                callback(res);
            });
        },
        getAnyBridge: function (action, params, callback) {
            var name = action;
            bridgeCommon(name, params, function (res) {
                callback(res);
            });
        }
    };

    return JsBridge;

}));
