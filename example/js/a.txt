import React from 'react'
import { connect } from 'react-redux'
import { withRouter } from 'react-router-dom'
import { Form, Button, Row, Col, Input, Tooltip, Icon} from 'antd'
import formattedTitle from 'src/components/formattedTitle'
import pic from 'src/assets/images/avatar.png'
import { _filterObj} from 'src/utils/utils'
import AuthButton from 'src/components/Auth/AuthComponent'

const FormItem = Form.Item
var selfInfo = {}

class SelfInfo extends React.Component {
  state = {
    changeInfo: {

    }
  }
  // //避免父组件更新props的时候,子组件进行不必要的更新
  shouldComponentUpdate(nextProps, nextState){
    if ( JSON.stringify(this.props) === JSON.stringify(nextProps) && JSON.stringify(this.state) === JSON.stringify(nextState) ) {
      return false
    }else{
      return true
    }
  }

  onChangeUserInfo = (name, value) => {
    const changeInfo = { ...this.state.changeInfo, [name]: value }

    this.setState({changeInfo})
  }

  onSave = () => {
    const { dispatch } = this.props

    this.props.form.validateFieldsAndScroll((err, values) => {
      if (!err) {
        let changeInfo = this.state.changeInfo
        let _params = {
          name: selfInfo.name,
          email: changeInfo.email ?　changeInfo.email : selfInfo.email,
          safeloguser: changeInfo.safeloguser ? changeInfo.safeloguser : selfInfo.safeloguser
        }
        
        _filterObj(_params)
        dispatch({ type: 'SELF_UPDATESELF_REQUEST', payload: _params})
      }
    })
  }
  

  render() {
    const {form, _selfInfo} = this.props
    const { getFieldDecorator } = form
    
    selfInfo = _selfInfo.selfInfo

    let departmentName = (selfInfo.department || []).map(dept => dept.department).join(' , ')

    let rolename = (selfInfo.roles || []).map(role => role.rolename).join(' , ')

    return (
      <div className="self-selfinfo">
        <div className="selfinfo-top">
          <div className="selfinfo-img">
            <img src={pic} alt="user photo"/>
          </div>
          <div className="selfinfo-text">
            <p>用户名：{selfInfo.user_name}</p>
            <p>姓名： {selfInfo.name}</p>
            <p>隶属部门： {departmentName}</p>
            <p>用户角色： {rolename}</p>
          </div>
        </div>
        <Form>
          <Row gutter={24}>
            <Col span={24}>
              <FormItem required  label={(
                <span>
                  用户邮箱&nbsp;
                  <Tooltip title="邮箱将用于新用户发送密码、忘记密码、数据提醒等功能">
                    <Icon type="question-circle-o" />
                  </Tooltip>
                </span>
              )}>
                {getFieldDecorator('email', {
                  validateFirst: true,
                  initialValue: selfInfo ? selfInfo.email : '',
                  rules: [
                    {
                      required: true, message: formattedTitle('user.email'),
                    },
                    {
                      type: 'email', message: '请输入正确的邮箱格式',
                    }
                  ], 
                })
                (<Input 
                  placeholder={formattedTitle('user.email')} 
                  onChange={event => this.onChangeUserInfo('email', event.target.value)}
                />)}   
              </FormItem>
            </Col>
            <Col span={24}>
              <FormItem required  label="猫头鹰账号">
                {getFieldDecorator('safeloguser', {
                  validateFirst: true,
                  initialValue: selfInfo ? selfInfo.safeloguser : '',
                  rules: [
                    {
                      required: true, message: '请输入您的猫头鹰账号',
                    },
                  ], 
                })
                (<Input 
                  placeholder="请输入您的猫头鹰账号"
                  onChange={event => this.onChangeUserInfo('safeloguser', event.target.value)}
                />)}   
              </FormItem>
            </Col>
          </Row>
        </Form>  
        <div className="self-footer">
          <AuthButton id="btn_sys_personalset_updatepersonalset">
            <Button className="self-submit" type="primary" onClick={() => { this.onSave() }}>保存</Button>
          </AuthButton>
        </div>
      </div>
    )
  }
}

const mapStateToProps = state => ({
})
export default  connect(mapStateToProps)(withRouter(Form.create()(SelfInfo)))  