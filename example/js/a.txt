import React from 'react'
import { connect } from 'react-redux'
import { withRouter } from 'react-router-dom'
import { Form, Button, Row, Col, Input, Tooltip, Icon} from 'antd'
import formattedTitle from 'src/components/formattedTitle'
import pic from 'src/assets/images/avatar.png'
import { _filterObj} from 'src/utils/utils'
import AuthButton from 'src/components/Auth/AuthComponent'

const FormItem = Form.Item
var selfInfo = {}

class SelfInfo extends React.Component {
  state = {
    changeInfo: {

    }
  }
  // //避免父组件更新props的时候,子组件进行不必要的更新
  shouldComponentUpdate(nextProps, nextState){
    if ( JSON.stringify(this.props) === JSON.stringify(nextProps) && JSON.stringify(this.state) === JSON.stringify(nextState) ) {
      return false
    }else{
      return true
    }
  }

  onChangeUserInfo = (name, value) => {
    const changeInfo = { ...this.state.changeInfo, [name]: value }

    this.setState({changeInfo})
  }

  onSave = () => {
    const { dispatch } = this.props

    this.props.form.validateFieldsAndScroll((err, values) => {
      if (!err) {
        let changeInfo = this.state.changeInfo
        let _params = {
          name: selfInfo.name,
          email: changeInfo.email ?　changeInfo.email : selfInfo.email,
          safeloguser: changeInfo.safeloguser ? changeInfo.safeloguser : selfInfo.safeloguser
        }
        
        _filterObj(_params)
        dispatch({ type: 'SELF_UPDATESELF_REQUEST', payload: _params})
      }
    })
  }
  

  render() {
    const {form, _selfInfo} = this.props
    const { getFieldDecorator } = form
    
    selfInfo = _selfInfo.selfInfo

    let departmentName = (selfInfo.department || []).map(dept => dept.department).join(' , ')

    let rolename = (selfInfo.roles || []).map(role => role.rolename).join(' , ')

    return (
      <div className="self-selfinfo">
        <div className="selfinfo-top">
          <div className="selfinfo-img">
            <img src={pic} alt="user photo"/>
          </div>
          <div className="selfinfo-text">
            <p>用户名：{selfInfo.user_name}</p>
            <p>姓名： {selfInfo.name}</p>
            <p>隶属部门： {departmentName}</p>
            <p>用户角色： {rolename}</p>
          </div>
        </div>
        <Form>
          <Row gutter={24}>
            <Col span={24}>
              <FormItem required  label={(
                <span>
                  用户邮箱&nbsp;
                  <Tooltip title="邮箱将用于新用户发送密码、忘记密码、数据提醒等功能">
                    <Icon type="question-circle-o" />
                  </Tooltip>
                </span>
              )}>
                {getFieldDecorator('email', {
                  validateFirst: true,
                  initialValue: selfInfo ? selfInfo.email : '',
                  rules: [
                    {
                      required: true, message: formattedTitle('user.email'),
                    },
                    {
                      type: 'email', message: '请输入正确的邮箱格式',
                    }
                  ], 
                })
                (<Input 
                  placeholder={formattedTitle('user.email')} 
                  onChange={event => this.onChangeUserInfo('email', event.target.value)}
                />)}   
              </FormItem>
            </Col>
            <Col span={24}>
              <FormItem required  label="猫头鹰账号">
                {getFieldDecorator('safeloguser', {
                  validateFirst: true,
                  initialValue: selfInfo ? selfInfo.safeloguser : '',
                  rules: [
                    {
                      required: true, message: '请输入您的猫头鹰账号',
                    },
                  ], 
                })
                (<Input 
                  placeholder="请输入您的猫头鹰账号"
                  onChange={event => this.onChangeUserInfo('safeloguser', event.target.value)}
                />)}   
              </FormItem>
            </Col>
          </Row>
        </Form>  
        <div className="self-footer">
          <AuthButton id="btn_sys_personalset_updatepersonalset">
            <Button className="self-submit" type="primary" onClick={() => { this.onSave() }}>保存</Button>
          </AuthButton>
        </div>
      </div>
    )
  }
}

const mapStateToProps = state => ({
})
export default  connect(mapStateToProps)(withRouter(Form.create()(SelfInfo)))  


离线包技术
》项目介绍：公司大部分C端项目是在公司app内部打开，并且用户大部分处理弱网环境，离线包的方案有很大的实现价值，提升用户首屏加载速度。
思路就是类似RN提前把web的资源缓存到app，web发起请求的时候，app拦截get请求，从缓存取资源返回给web。
》遇到问题：1.离线包的html缓存导致页面缓存和图片未缓存导致图片显示太慢(打包插件新增配置项)2.每次发版用户需要下载全量包(根据版本号对比,只下载差分包)
》价值:从本质上提供了一种首屏加载的解决方案,应用到多个项目中提升了首屏性能30%-60%不等
》成长:从0到1设计整个方案最终成功运用到多个项目并推广到公司其他部门使用



官网项目性能优化
》项目介绍：公司官网打包优化，图片显示优化等。从打包，performance性能分析工具，网络请求，代码等层面各方面分析问题并针对问题提出解决方案。
》项目职责：
1.官网项目根据analyzer打包分析工具,发现很多公共css和js,重复打包了修改公共资源配置打到公共包
2.高清大图是LCP的瓶颈,提前加载大图片
3.根据屏幕分辨率加载对应的2k,3k图
》价值: 包体积：5.15MB=> 2.76MB,LCP速度提升38%
》相关技术：analyzer，performance，network


插件工具开发
》项目介绍: 开发时的一些复制粘贴工作,比较浪费时间,做一些插件可以提示开发效率,减少工作量和提高准确率
1.yapi接口文档转TS类型chrome插件:根据yapi接口文档自动生成ts类型代码-减少工作量
2.新框架调试工具chrome插件:为公司的搭建的微前端架构提供数据跟踪能力-加快开发调试查找问题
3.word转化html文档工具:把产品提供的word协议文档转化为html代码直接放到代码中使用-减少工作量
4.翻译工具导入导出插件:把谷歌表格导入到工程的i18n指定目录下-减少开发工作量
4.删除图片插件:删除项目中不被引用的图片-项目优化
5.离线包打包插件:根据实际需求把工程资源打包完的资源再次重新打包-为离线包技术服务
价值:减少开发人员的日常工作量
》相关技术：chrome插件，wangEditor，webpack插件


AMS广告发布系统（PC端）2019/2-2019/9
》项目介绍：重构公司的广告发布系统，为公司的广告发布提供简单方便的操作方案，通过智能控制广告的开启关闭，预警，调整预算等等一系列功能。
》项目职责： 1.可自定义配置表头。2. 编辑表格单元格内容 3. 广告发布与第三方平台的接口对接,报表数据呈现.
》相关技术：react+reudex+saga、antdisgin、node


谷歌广告爬虫工具
》项目介绍: 为了打击广告联盟使用公司的品牌关键词打广告,并且最后重定向的最终链接是他们自己的商品页面需要找出他们的这种广告链接,并且索要赔偿
》项目职责: 用Puppeteer模拟用操作搜索关键词过滤指定条件的谷歌广告上报给服务器,在到后台系统显示出来便于运营人员查看
》相关技术: node,koa,Puppeteer


六、IM聊天工具（PC端）2018/11-2018/12
》项目介绍：为公司的开放平台项目支持单对单的聊天功能，使用websocket协议，前后台双向通信。支持表情包，图片，文字，文件混合发送接收。
》项目职责：1.自制表情包组件 2. Websocket协议.3.心跳包 4.断线重连 5.失败重试  6. 可编辑div的光标，控制， 图片文字混合输入
》遇到问题: 可编辑div的光标控制问题,每次插入图片,表情之后,光标位置错乱(每次修改文字和插入图片之后,重新计算光标位置)
》相关技术：vue 、websocket、JavaScript、protobuf、精灵图片